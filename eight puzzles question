#include<stdio.h>
struct node
{
    int xy[3][3];
    int dir;
};
struct node sh[1000], end;
int count = 1;

void input()
{
    printf("输入初始状态:\n");
    int i, j;
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++)
            scanf("%d", &sh[0].xy[i][j]);
    sh[0].dir = -1;
    printf("输入目标状态:\n");
    for (i = 0; i < 3; i++)
        for (j = 0; j < 3; j++)
            scanf("%d", &sh[999].xy[i][j]);
    sh[999].dir = -1;
}

int location(int num)
{
    int i;
    for (i = 0; i < 9; i++)
        if (sh[num].xy[i / 3][i % 3] == 0) 
		return i;
}

long long sign(int num)
{
    long long  sum;
    sum = sh[num].xy[0][0]*100000000 + sh[num].xy[0][1]*10000000 + sh[num].xy[0][2]*1000000 + sh[num].xy[1][0]*100000 + sh[num].xy[1][1]*10000 + sh[num].xy[1][2]*1000 + sh[num].xy[2][0]*100 + sh[num].xy[2][1]*10 + sh[num].xy[2][2];
    return sum;
}

void move(int num)
{

    int t;
    int loc;
    int up = 1, down = 1, left = 1, right = 1;
    loc = location(num);
    int stand = sh[num].dir;//dir的0 1 2 3分别代表左 上 右 下
    if (loc / 3 != 0 && stand != 1)
    {
        sh[count] = sh[num];
        t = sh[count].xy[loc / 3][loc % 3];
        sh[count].xy[loc / 3][loc % 3] = sh[count].xy[loc / 3 - 1][loc % 3];
        sh[count].xy[loc / 3 - 1][loc % 3] = t;
        sh[count].dir = 3;
        count++;
    };//上移 
    if (loc / 3 != 2 && stand != 3)
    {
        sh[count] = sh[num];
        t = sh[count].xy[loc / 3][loc % 3];
        sh[count].xy[loc / 3][loc % 3] = sh[count].xy[loc / 3 + 1][loc % 3];
        sh[count].xy[loc / 3 + 1][loc % 3] = t;
        sh[count].dir = 1;
        count++;
    }//下移 
    if (loc % 3 != 0 && stand != 0)
    {
        sh[count] = sh[num];
        t = sh[count].xy[loc / 3][loc % 3];
        sh[count].xy[loc / 3][loc % 3] = sh[count].xy[loc / 3][loc % 3 - 1];
        sh[count].xy[loc / 3][loc % 3 - 1] = t;
        sh[count].dir = 2;
        count++;
    }//左移 
    if (loc % 3 != 2 && stand != 2)
    {
        sh[count] = sh[num];
        t = sh[count].xy[loc / 3][loc % 3];
        sh[count].xy[loc / 3][loc % 3] = sh[count].xy[loc / 3][loc % 3 + 1];
        sh[count].xy[loc / 3][loc % 3 + 1] = t;
        sh[count].dir = 0;
        count++;
    }//右移 

}
void display(int n)
{
    int i, j;
    for (i = 0; i < 3; i++)
    {
        for (j = 0; j < 3; j++)
            printf("%d ", sh[n].xy[i][j]);
        printf("\n");
    }
}

int bfsearch()
{
    int i = 0;
    while (1)
    {
        printf("\n");
        display(i);
        printf("\n");
        if (i == 1000)
        {
            printf("搜索超出了1000次\n");
            return 0;
        }
        if (sign(i) == sign(999))
        {
            printf("在第%d次找到了\n", i);
            display(i);
            return i;
        }
        move(i);
        i++;
    }
}

int main()
{
	int a;
    input();
    a=bfsearch();
    if(a==0)
		printf("很抱歉没有找到目标状态") ;
	else 
    	printf("经历了%d次终于找到了",a);
    return 0;
}
